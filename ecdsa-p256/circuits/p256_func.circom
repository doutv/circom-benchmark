/// This file provides methods to grab curve parameter based on various representations

pragma circom 2.1.5;

function get_A(n, k) {
    assert((n == 86 && k == 3) || (n == 64 && k == 4) || (n == 43 && k ==6));
    var ret[100];
    if (n == 86 && k == 3) {
        ret[0] = 77371252455336267181195260;
        ret[1] = 1023;
        ret[2] = 19342813109330467168976896;
    }

    if (n == 64 && k == 4) {
        ret[0] = 18446744073709551615;
        ret[1] = 4294967295;
        ret[2] = 0;
        ret[3] = 18446744069414584321;
    }

    if (n == 43 && k == 6) {
        ret[0] = 8796093022204;
        ret[1] = 8796093022207;
        ret[2] = 1023;
        ret[3] = 0;
        ret[4] = 1048576;
        ret[5] = 2199023255040;
    }
    return ret;
}

//done
function get_B(n,k) {
    assert((n == 86 && k == 3) || (n == 64 && k == 4) || (n == 43 && k ==6));
    var ret[100];
    if (n == 86 && k == 3) {
        ret[0] = 23805269282153275520606283;
        ret[1] = 64478498050055519801623345;
        ret[2] = 6858709101169761702330043;
    }

    if (n == 64 && k == 4) {
        ret[0] = 4309448131093880907;
        ret[1] = 7285987128567378166;
        ret[2] = 12964664127075681980;
        ret[3] = 6540974713487397863;
    }

    if (n == 43 && k == 6) {
        ret[0] = 4665002582091;
        ret[1] = 2706345785799;
        ret[2] = 1737114698545;
        ret[3] = 7330356544350;
        ret[4] = 4025432620731;
        ret[5] = 779744948564;
    }

    return ret;
}

//done
function get_p256_prime(n, k) {
     assert((n == 86 && k == 3) || (n == 64 && k == 4) || (n == 32 && k == 8) || (n == 43 && k == 6));
    
    // done
    var ret[100];
    if (n == 86 && k == 3) {
        ret[0] = 77371252455336267181195263;
        ret[1] = 1023;
        ret[2] = 19342813109330467168976896;
    }

    // done
    if (n == 64 && k == 4) {
        ret[0] = 18446744073709551615;
        ret[1] = 4294967295;
        ret[2] = 0;
        ret[3] = 18446744069414584321;
    }

    if (n==32 && k==8) {
        ret[0] = 4294967295;
        ret[1] = 4294967295;
        ret[2] = 4294967295;
        ret[3] = 0;
        ret[4] = 0;
        ret[5] = 0;
        ret[6] = 1;
        ret[7] = 4294967295;
    }

    if (n == 43 && k == 6) {
        ret[0] = 8796093022207;
        ret[1] = 8796093022207;
        ret[2] = 1023;
        ret[3] = 0;
        ret[4] = 1048576;
        ret[5] = 2199023255040;
    }
    return ret;
}

//done 
function get_p256_order(n, k) {
    assert((n == 86 && k == 3) || (n == 64 && k == 4) || (n == 43 && k ==6));
    var ret[100];

    //done
    if (n == 86 && k == 3) {
        ret[0] = 28553880287938765337601361;
        ret[1] = 77371252455335114450843292;
        ret[2] = 19342813109330467168976895;
    }

    //done
    if (n == 64 && k == 4) {
        ret[0] = 17562291160714782033;
        ret[1] = 13611842547513532036;
        ret[2] = 18446744073709551615;
        ret[3] = 18446744069414584320;
    }

    if (n == 43 && k == 6) {
        ret[0] = 3036481267025;
        ret[1] = 3246200354617;
        ret[2] = 7643362670236;
        ret[3] = 8796093022207;
        ret[4] = 1048575;
        ret[5] = 2199023255040;
    }
    return ret;
}

// returns G * 2 ** 255
// TODO check that this is correct...
// DONE: change to P256 generator (double 255 times)
function get_dummy_point(n, k) {
    assert(n == 86 && k == 3 || n == 64 && k == 4 || n == 43 && k == 6);
    var ret[2][100]; // should be [2][k]
    if (k == 3) {
        // done
        ret[0][0] = 49732730225977125179960148;
        ret[0][1] = 43852565336912664664048527;
        ret[0][2] = 9043934293559324284618350;
        ret[1][0] = 20405083474242608521046015;
        ret[1][1] = 57969189420107975911442337;
        ret[1][2] = 12380911704996683387468560;
    } else if (k == 4) {
        // done
        ret[0][0] = 4385603450014130423;
        ret[0][1] = 5129391198466743360;
        ret[0][2] = 5796222465970311708;
        ret[0][3] = 10225584345548510712;
        ret[1][0] = 8840623018579563820;
        ret[1][1] = 13067171496386086;
        ret[1][2] = 16363666747424765582;
        ret[1][3] = 9735895490635206920;
    } else if (k == 6) {
        ret[0][0] = 5013155818324;
        ret[0][1] = 5653956830653;
        ret[0][2] = 1357089440655;
        ret[0][3] = 4985459479134;
        ret[0][4] = 7362399503982;
        ret[0][5] = 1028176290396;
        ret[1][0] = 2185447106559;
        ret[1][1] = 2319789413632;
        ret[1][2] = 3837703653281;
        ret[1][3] = 6590333830457;
        ret[1][4] = 5404134177552;
        ret[1][5] = 1407546699851;
    }
    return ret;
}

function get_p256_params() {
    var a[100] = get_A(43, 6);
    var b[100] = get_B(43, 6);
    var p[100] = get_p256_prime(43, 6);
    var n[100] = get_p256_order(43, 6);

    var A[6];
    var B[6];
    var P[6];
    var N[6];
    for (var i = 0; i < 6; i++) {
        A[i] = a[i];
        B[i] = b[i];
        P[i] = p[i];
        N[i] = n[i];
    }

    return [A,B,P,N];
}